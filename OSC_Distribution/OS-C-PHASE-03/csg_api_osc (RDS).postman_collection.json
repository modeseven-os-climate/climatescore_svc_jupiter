{
	"info": {
		"_postman_id": "4f021ff7-9dbb-495f-9916-b72d1b6547c6",
		"name": "csg_api_osc (RDS)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "/allperils?lat=49.2&lon=-102.2222222",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"/perils has HTTP status 200\", function() {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}/allperils?lat=49.2&lon=-102.2222222",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"allperils"
					],
					"query": [
						{
							"key": "lat",
							"value": "49.2"
						},
						{
							"key": "lon",
							"value": "-102.2222222"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/wind?lat=49.2&lon=-102.2222222",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"/perils has HTTP status 200\", function() {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}/wind?lat=49.2&lon=-102.2222222",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"wind"
					],
					"query": [
						{
							"key": "lat",
							"value": "49.2"
						},
						{
							"key": "lon",
							"value": "-102.2222222"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/wind?lat=49.2&lon=-102.2222222&year=2030",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"/perils has HTTP status 200\", function() {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}/wind?lat=49.2&lon=-102.2222222&year=2030",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"wind"
					],
					"query": [
						{
							"key": "lat",
							"value": "49.2"
						},
						{
							"key": "lon",
							"value": "-102.2222222"
						},
						{
							"key": "year",
							"value": "2030"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/wind?lat=49.2&lon=-102.2222222&year=2030&scenario=ssp585",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"/perils has HTTP status 200\", function() {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}/wind?lat=49.2&lon=-102.2222222&year=2030&scenario=ssp585",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"wind"
					],
					"query": [
						{
							"key": "lat",
							"value": "49.2"
						},
						{
							"key": "lon",
							"value": "-102.2222222"
						},
						{
							"key": "year",
							"value": "2030"
						},
						{
							"key": "scenario",
							"value": "ssp585"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "perils",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"/perils has HTTP status 200\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"/perils has peril settings\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.keys(",
							"        [",
							"            \"version\",",
							"            \"perils\"",
							"        ]",
							"    );",
							"});",
							"pm.test(\"/perils has peril records\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.perils).to.be.an(\"array\");",
							"    console.log(\"Number of perils: \" + jsonData.perils.length);",
							"    jsonData.perils.forEach(function(item, index){",
							"        pm.expect(item.peril).to.be.an(\"string\");",
							"        pm.expect(item.peril_code).to.be.an(\"string\");",
							"        pm.expect(item.peril_version).to.be.an(\"string\");",
							"        pm.expect(item.metric).to.be.an(\"string\");",
							"        pm.expect(item.metric_units).to.be.an(\"string\");",
							"        pm.expect(item.scenario).to.be.an(\"string\");",
							"        pm.expect(item.year).to.be.an(\"number\");",
							"    });",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}/perils",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"perils"
					]
				}
			},
			"response": []
		},
		{
			"name": "404",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"/missing has HTTP status 404\", function() {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}/missing",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"missing"
					]
				}
			},
			"response": []
		},
		{
			"name": "healthz",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"/healthz has HTTP status 200\", function() {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}/healthz",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"healthz"
					]
				}
			},
			"response": []
		},
		{
			"name": "location-json",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"/location has HTTP status 200\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"",
							"const location_properties = [",
							"    \"latitude\",",
							"    \"longitude\",",
							"    \"extra\",",
							"    \"errors\",",
							"    \"status\"",
							"];",
							"",
							"const peril_properties = [",
							"    \"peril\",",
							"    \"peril_code\",",
							"    \"peril_version\",",
							"    \"scenario\",",
							"    \"year\",",
							"    \"metric\",",
							"    \"metric_units\"",
							"];",
							"",
							"const peril_outcome_properties = [",
							"    \"m_latitude\",",
							"    \"m_longitude\",",
							"    \"metric_mean\",",
							"    \"metric_lower\",",
							"    \"metric_upper\"",
							"];",
							"",
							"pm.test(\"/location has request settings\", function () {",
							"    var jsonData = pm.response.json();",
							"    const settings = jsonData.settings;",
							"    pm.expect(settings).to.be.an('object');",
							"    const settings_properties = [",
							"        \"csg_version\",",
							"        \"perils\",",
							"        \"metrics\",",
							"        \"scenarios\",",
							"        \"years\"",
							"    ];",
							"    pm.expect(settings).to.include.keys(settings_properties);",
							"});",
							"",
							"pm.test(\"/location has JSON peril features\", function () {",
							"    var jsonData = pm.response.json();",
							"    const records = jsonData.records;",
							"    pm.expect(records).to.be.an('array');",
							"    pm.expect(records).to.have.lengthOf.at.least(1);",
							"    records.forEach(function(item, index) {",
							"        pm.expect(item).to.be.an('object');",
							"      ",
							"        pm.expect(item.latitude).to.be.an('number');",
							"        pm.expect(item.latitude).that.is.within(-90,90);",
							"        pm.expect(item.longitude).to.be.an('number');",
							"        pm.expect(item.longitude).that.is.within(-180,180);",
							"",
							"        pm.expect(item.status).to.be.an('number');",
							"        pm.expect(item.status).to.eq(200);",
							"        ",
							"        pm.expect(item.errors).to.be.an('array');",
							"        pm.expect(item.errors.length).to.eq(0);",
							"    });",
							"});",
							"",
							"pm.test(\"/location has NaN uncertainty values\", function () {",
							"    var jsonData = pm.response.json();",
							"    const settings = jsonData.settings;",
							"    const records = jsonData.records;",
							"    records.forEach(function(item, index) {",
							"        pm.expect(item).to.be.an('object');",
							"        pm.expect(item.metric_mean).to.not.eq(-9999.0);",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/geo+json",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"locations\": [\n        {{sf_location}}\n    ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseURL}}/location",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"location"
					]
				}
			},
			"response": []
		},
		{
			"name": "location-json-filters",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"/location has HTTP status 200\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"",
							"const location_properties = [",
							"    \"latitude\",",
							"    \"longitude\",",
							"    \"extra\",",
							"    \"errors\",",
							"    \"status\"",
							"];",
							"",
							"const peril_properties = [",
							"    \"peril\",",
							"    \"peril_code\",",
							"    \"peril_version\",",
							"    \"scenario\",",
							"    \"year\",",
							"    \"metric\",",
							"    \"metric_units\"",
							"];",
							"",
							"const peril_outcome_properties = [",
							"    \"m_latitude\",",
							"    \"m_longitude\",",
							"    \"metric_mean\",",
							"    \"metric_lower\",",
							"    \"metric_upper\"",
							"];",
							"",
							"pm.test(\"/location has request settings\", function () {",
							"    var jsonData = pm.response.json();",
							"    const settings = jsonData.settings;",
							"    pm.expect(settings).to.be.an('object');",
							"    const settings_properties = [",
							"        \"csg_version\",",
							"        \"perils\",",
							"        \"metrics\",",
							"        \"scenarios\",",
							"        \"years\"",
							"    ];",
							"    pm.expect(settings).to.include.keys(settings_properties);",
							"});",
							"",
							"pm.test(\"/location has JSON peril features\", function () {",
							"    var jsonData = pm.response.json();",
							"    const records = jsonData.records;",
							"    pm.expect(records).to.be.an('array');",
							"    pm.expect(records).to.have.lengthOf.at.least(1);",
							"    records.forEach(function(item, index) {",
							"        pm.expect(item).to.be.an('object');",
							"      ",
							"        pm.expect(item.latitude).to.be.an('number');",
							"        pm.expect(item.latitude).that.is.within(-90,90);",
							"        pm.expect(item.longitude).to.be.an('number');",
							"        pm.expect(item.longitude).that.is.within(-180,180);",
							"",
							"        pm.expect(item.status).to.be.an('number');",
							"        pm.expect(item.status).to.eq(200);",
							"        ",
							"        pm.expect(item.errors).to.be.an('array');",
							"        pm.expect(item.errors.length).to.eq(0);",
							"    });",
							"});",
							"",
							"pm.test(\"/location has NaN uncertainty values\", function () {",
							"    var jsonData = pm.response.json();",
							"    const settings = jsonData.settings;",
							"    const records = jsonData.records;",
							"    records.forEach(function(item, index) {",
							"        pm.expect(item).to.be.an('object');",
							"        pm.expect(item.metric_mean).to.not.eq(-9999.0);",
							"    });",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/geo+json",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"locations\": [\n        {{sf_location}}\n    ],\n    \"perils\": [\"drought\", \"fire\"],\n    \"scenarios\": [\"ssp585\"],\n    \"years\": [2030, 2040]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseURL}}/location",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"location"
					]
				}
			},
			"response": []
		},
		{
			"name": "location-json-404-no locations",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"/location has HTTP status 404\", function() {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/geo+json",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseURL}}/location",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"location"
					]
				}
			},
			"response": []
		},
		{
			"name": "location-json-filters (fire)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"/location has HTTP status 200\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"",
							"const location_properties = [",
							"    \"latitude\",",
							"    \"longitude\",",
							"    \"extra\",",
							"    \"errors\",",
							"    \"status\"",
							"];",
							"",
							"const peril_properties = [",
							"    \"peril\",",
							"    \"peril_code\",",
							"    \"peril_version\",",
							"    \"scenario\",",
							"    \"year\",",
							"    \"metric\",",
							"    \"metric_units\"",
							"];",
							"",
							"const peril_outcome_properties = [",
							"    \"m_latitude\",",
							"    \"m_longitude\",",
							"    \"metric_mean\",",
							"    \"metric_lower\",",
							"    \"metric_upper\"",
							"];",
							"",
							"pm.test(\"/location has request settings\", function () {",
							"    var jsonData = pm.response.json();",
							"    const settings = jsonData.settings;",
							"    pm.expect(settings).to.be.an('object');",
							"    const settings_properties = [",
							"        \"csg_version\",",
							"        \"perils\",",
							"        \"metrics\",",
							"        \"scenarios\",",
							"        \"years\"",
							"    ];",
							"    pm.expect(settings).to.include.keys(settings_properties);",
							"});",
							"",
							"pm.test(\"/location has JSON peril features\", function () {",
							"    var jsonData = pm.response.json();",
							"    const records = jsonData.records;",
							"    pm.expect(records).to.be.an('array');",
							"    pm.expect(records).to.have.lengthOf.at.least(1);",
							"    records.forEach(function(item, index) {",
							"        pm.expect(item).to.be.an('object');",
							"      ",
							"        pm.expect(item.latitude).to.be.an('number');",
							"        pm.expect(item.latitude).that.is.within(-90,90);",
							"        pm.expect(item.longitude).to.be.an('number');",
							"        pm.expect(item.longitude).that.is.within(-180,180);",
							"",
							"        pm.expect(item.status).to.be.an('number');",
							"        pm.expect(item.status).to.eq(200);",
							"        ",
							"        pm.expect(item.errors).to.be.an('array');",
							"        pm.expect(item.errors.length).to.eq(0);",
							"    });",
							"});",
							"",
							"pm.test(\"/location has NaN uncertainty values\", function () {",
							"    var jsonData = pm.response.json();",
							"    const settings = jsonData.settings;",
							"    const records = jsonData.records;",
							"    records.forEach(function(item, index) {",
							"        pm.expect(item).to.be.an('object');",
							"        pm.expect(item.metric_mean).to.not.eq(-9999.0);",
							"    });",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/geo+json",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"locations\": [\n        {{sf_location}}\n    ],\n    \"perils\": [\"fire\"],\n    \"scenarios\": [\"ssp126\",\"ssp585\"],\n    \"years\": [2020,2030, 2040,2050,2075,2100]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseURL}}/location",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"location"
					]
				}
			},
			"response": []
		},
		{
			"name": "location-json-filters (drought)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"/location has HTTP status 200\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"",
							"const location_properties = [",
							"    \"latitude\",",
							"    \"longitude\",",
							"    \"extra\",",
							"    \"errors\",",
							"    \"status\"",
							"];",
							"",
							"const peril_properties = [",
							"    \"peril\",",
							"    \"peril_code\",",
							"    \"peril_version\",",
							"    \"scenario\",",
							"    \"year\",",
							"    \"metric\",",
							"    \"metric_units\"",
							"];",
							"",
							"const peril_outcome_properties = [",
							"    \"m_latitude\",",
							"    \"m_longitude\",",
							"    \"metric_mean\",",
							"    \"metric_lower\",",
							"    \"metric_upper\"",
							"];",
							"",
							"pm.test(\"/location has request settings\", function () {",
							"    var jsonData = pm.response.json();",
							"    const settings = jsonData.settings;",
							"    pm.expect(settings).to.be.an('object');",
							"    const settings_properties = [",
							"        \"csg_version\",",
							"        \"perils\",",
							"        \"metrics\",",
							"        \"scenarios\",",
							"        \"years\"",
							"    ];",
							"    pm.expect(settings).to.include.keys(settings_properties);",
							"});",
							"",
							"pm.test(\"/location has JSON peril features\", function () {",
							"    var jsonData = pm.response.json();",
							"    const records = jsonData.records;",
							"    pm.expect(records).to.be.an('array');",
							"    pm.expect(records).to.have.lengthOf.at.least(1);",
							"    records.forEach(function(item, index) {",
							"        pm.expect(item).to.be.an('object');",
							"      ",
							"        pm.expect(item.latitude).to.be.an('number');",
							"        pm.expect(item.latitude).that.is.within(-90,90);",
							"        pm.expect(item.longitude).to.be.an('number');",
							"        pm.expect(item.longitude).that.is.within(-180,180);",
							"",
							"        pm.expect(item.status).to.be.an('number');",
							"        pm.expect(item.status).to.eq(200);",
							"        ",
							"        pm.expect(item.errors).to.be.an('array');",
							"        pm.expect(item.errors.length).to.eq(0);",
							"    });",
							"});",
							"",
							"pm.test(\"/location has NaN uncertainty values\", function () {",
							"    var jsonData = pm.response.json();",
							"    const settings = jsonData.settings;",
							"    const records = jsonData.records;",
							"    records.forEach(function(item, index) {",
							"        pm.expect(item).to.be.an('object');",
							"        pm.expect(item.metric_mean).to.not.eq(-9999.0);",
							"    });",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/geo+json",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"locations\": [\n        {{sf_location}}\n    ],\n    \"perils\": [\"drought\"],\n    \"scenarios\": [\"ssp126\",\"ssp585\"],\n    \"years\": [2020,2030, 2040,2050,2075,2100]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseURL}}/location",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"location"
					]
				}
			},
			"response": []
		},
		{
			"name": "location-json-filters (hail)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"/location has HTTP status 200\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"",
							"const location_properties = [",
							"    \"latitude\",",
							"    \"longitude\",",
							"    \"extra\",",
							"    \"errors\",",
							"    \"status\"",
							"];",
							"",
							"const peril_properties = [",
							"    \"peril\",",
							"    \"peril_code\",",
							"    \"peril_version\",",
							"    \"scenario\",",
							"    \"year\",",
							"    \"metric\",",
							"    \"metric_units\"",
							"];",
							"",
							"const peril_outcome_properties = [",
							"    \"m_latitude\",",
							"    \"m_longitude\",",
							"    \"metric_mean\",",
							"    \"metric_lower\",",
							"    \"metric_upper\"",
							"];",
							"",
							"pm.test(\"/location has request settings\", function () {",
							"    var jsonData = pm.response.json();",
							"    const settings = jsonData.settings;",
							"    pm.expect(settings).to.be.an('object');",
							"    const settings_properties = [",
							"        \"csg_version\",",
							"        \"perils\",",
							"        \"metrics\",",
							"        \"scenarios\",",
							"        \"years\"",
							"    ];",
							"    pm.expect(settings).to.include.keys(settings_properties);",
							"});",
							"",
							"pm.test(\"/location has JSON peril features\", function () {",
							"    var jsonData = pm.response.json();",
							"    const records = jsonData.records;",
							"    pm.expect(records).to.be.an('array');",
							"    pm.expect(records).to.have.lengthOf.at.least(1);",
							"    records.forEach(function(item, index) {",
							"        pm.expect(item).to.be.an('object');",
							"      ",
							"        pm.expect(item.latitude).to.be.an('number');",
							"        pm.expect(item.latitude).that.is.within(-90,90);",
							"        pm.expect(item.longitude).to.be.an('number');",
							"        pm.expect(item.longitude).that.is.within(-180,180);",
							"",
							"        pm.expect(item.status).to.be.an('number');",
							"        pm.expect(item.status).to.eq(200);",
							"        ",
							"        pm.expect(item.errors).to.be.an('array');",
							"        pm.expect(item.errors.length).to.eq(0);",
							"    });",
							"});",
							"",
							"pm.test(\"/location has NaN uncertainty values\", function () {",
							"    var jsonData = pm.response.json();",
							"    const settings = jsonData.settings;",
							"    const records = jsonData.records;",
							"    records.forEach(function(item, index) {",
							"        pm.expect(item).to.be.an('object');",
							"        pm.expect(item.metric_mean).to.not.eq(-9999.0);",
							"    });",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/geo+json",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"locations\": [\n        {{sf_location}}\n    ],\n    \"perils\": [\"hail\"],\n    \"scenarios\": [\"ssp126\",\"ssp585\"],\n    \"years\": [2020,2030, 2040,2050,2075,2100]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseURL}}/location",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"location"
					]
				}
			},
			"response": []
		},
		{
			"name": "location-json-filters (heat)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"/location has HTTP status 200\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"",
							"const location_properties = [",
							"    \"latitude\",",
							"    \"longitude\",",
							"    \"extra\",",
							"    \"errors\",",
							"    \"status\"",
							"];",
							"",
							"const peril_properties = [",
							"    \"peril\",",
							"    \"peril_code\",",
							"    \"peril_version\",",
							"    \"scenario\",",
							"    \"year\",",
							"    \"metric\",",
							"    \"metric_units\"",
							"];",
							"",
							"const peril_outcome_properties = [",
							"    \"m_latitude\",",
							"    \"m_longitude\",",
							"    \"metric_mean\",",
							"    \"metric_lower\",",
							"    \"metric_upper\"",
							"];",
							"",
							"pm.test(\"/location has request settings\", function () {",
							"    var jsonData = pm.response.json();",
							"    const settings = jsonData.settings;",
							"    pm.expect(settings).to.be.an('object');",
							"    const settings_properties = [",
							"        \"csg_version\",",
							"        \"perils\",",
							"        \"metrics\",",
							"        \"scenarios\",",
							"        \"years\"",
							"    ];",
							"    pm.expect(settings).to.include.keys(settings_properties);",
							"});",
							"",
							"pm.test(\"/location has JSON peril features\", function () {",
							"    var jsonData = pm.response.json();",
							"    const records = jsonData.records;",
							"    pm.expect(records).to.be.an('array');",
							"    pm.expect(records).to.have.lengthOf.at.least(1);",
							"    records.forEach(function(item, index) {",
							"        pm.expect(item).to.be.an('object');",
							"      ",
							"        pm.expect(item.latitude).to.be.an('number');",
							"        pm.expect(item.latitude).that.is.within(-90,90);",
							"        pm.expect(item.longitude).to.be.an('number');",
							"        pm.expect(item.longitude).that.is.within(-180,180);",
							"",
							"        pm.expect(item.status).to.be.an('number');",
							"        pm.expect(item.status).to.eq(200);",
							"        ",
							"        pm.expect(item.errors).to.be.an('array');",
							"        pm.expect(item.errors.length).to.eq(0);",
							"    });",
							"});",
							"",
							"pm.test(\"/location has NaN uncertainty values\", function () {",
							"    var jsonData = pm.response.json();",
							"    const settings = jsonData.settings;",
							"    const records = jsonData.records;",
							"    records.forEach(function(item, index) {",
							"        pm.expect(item).to.be.an('object');",
							"        pm.expect(item.metric_mean).to.not.eq(-9999.0);",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/geo+json",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"locations\": [\n        {{sf_location}}\n    ],\n    \"perils\": [\"heat\"],\n    \"scenarios\": [\"ssp126\",\"ssp585\"],\n    \"years\": [2020,2030, 2040,2050,2075,2100]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseURL}}/location",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"location"
					]
				}
			},
			"response": []
		},
		{
			"name": "location-json-filter (wind)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"/location has HTTP status 200\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"",
							"const location_properties = [",
							"    \"latitude\",",
							"    \"longitude\",",
							"    \"extra\",",
							"    \"errors\",",
							"    \"status\"",
							"];",
							"",
							"const peril_properties = [",
							"    \"peril\",",
							"    \"peril_code\",",
							"    \"peril_version\",",
							"    \"scenario\",",
							"    \"year\",",
							"    \"metric\",",
							"    \"metric_units\"",
							"];",
							"",
							"const peril_outcome_properties = [",
							"    \"m_latitude\",",
							"    \"m_longitude\",",
							"    \"metric_mean\",",
							"    \"metric_lower\",",
							"    \"metric_upper\"",
							"];",
							"",
							"pm.test(\"/location has request settings\", function () {",
							"    var jsonData = pm.response.json();",
							"    const settings = jsonData.settings;",
							"    pm.expect(settings).to.be.an('object');",
							"    const settings_properties = [",
							"        \"csg_version\",",
							"        \"perils\",",
							"        \"metrics\",",
							"        \"scenarios\",",
							"        \"years\"",
							"    ];",
							"    pm.expect(settings).to.include.keys(settings_properties);",
							"});",
							"",
							"pm.test(\"/location has JSON peril features\", function () {",
							"    var jsonData = pm.response.json();",
							"    const records = jsonData.records;",
							"    pm.expect(records).to.be.an('array');",
							"    pm.expect(records).to.have.lengthOf.at.least(1);",
							"    records.forEach(function(item, index) {",
							"        pm.expect(item).to.be.an('object');",
							"      ",
							"        pm.expect(item.latitude).to.be.an('number');",
							"        pm.expect(item.latitude).that.is.within(-90,90);",
							"        pm.expect(item.longitude).to.be.an('number');",
							"        pm.expect(item.longitude).that.is.within(-180,180);",
							"",
							"        pm.expect(item.status).to.be.an('number');",
							"        pm.expect(item.status).to.eq(200);",
							"        ",
							"        pm.expect(item.errors).to.be.an('array');",
							"        pm.expect(item.errors.length).to.eq(0);",
							"    });",
							"});",
							"",
							"pm.test(\"/location has NaN uncertainty values\", function () {",
							"    var jsonData = pm.response.json();",
							"    const settings = jsonData.settings;",
							"    const records = jsonData.records;",
							"    records.forEach(function(item, index) {",
							"        pm.expect(item).to.be.an('object');",
							"        pm.expect(item.metric_mean).to.not.eq(-9999.0);",
							"    });",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/geo+json",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"locations\": [\n        {{sf_location}}\n    ],\n    \"perils\":[\"wind\"],\n    \"scenarios\": [],\n    \"years\": []\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseURL}}/location",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"location"
					]
				}
			},
			"response": []
		},
		{
			"name": "location-json-filter (precip)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"/location has HTTP status 200\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"const location_properties = [",
							"    \"latitude\",",
							"    \"longitude\",",
							"    \"extra\",",
							"    \"errors\",",
							"    \"status\"",
							"];",
							"",
							"const peril_properties = [",
							"    \"peril\",",
							"    \"peril_code\",",
							"    \"peril_version\",",
							"    \"scenario\",",
							"    \"year\",",
							"    \"metric\",",
							"    \"metric_units\"",
							"];",
							"",
							"const peril_outcome_properties = [",
							"    \"m_latitude\",",
							"    \"m_longitude\",",
							"    \"metric_mean\",",
							"    \"metric_lower\",",
							"    \"metric_upper\"",
							"];",
							"",
							"pm.test(\"/location has request settings\", function () {",
							"    var jsonData = pm.response.json();",
							"    const settings = jsonData.settings;",
							"    pm.expect(settings).to.be.an('object');",
							"    const settings_properties = [",
							"        \"csg_version\",",
							"        \"perils\",",
							"        \"metrics\",",
							"        \"scenarios\",",
							"        \"years\"",
							"    ];",
							"    pm.expect(settings).to.include.keys(settings_properties);",
							"});",
							"",
							"pm.test(\"/location has JSON peril features\", function () {",
							"    var jsonData = pm.response.json();",
							"    const records = jsonData.records;",
							"    pm.expect(records).to.be.an('array');",
							"    pm.expect(records).to.have.lengthOf.at.least(1);",
							"    records.forEach(function(item, index) {",
							"        pm.expect(item).to.be.an('object');",
							"      ",
							"        pm.expect(item.latitude).to.be.an('number');",
							"        pm.expect(item.latitude).that.is.within(-90,90);",
							"        pm.expect(item.longitude).to.be.an('number');",
							"        pm.expect(item.longitude).that.is.within(-180,180);",
							"",
							"        pm.expect(item.status).to.be.an('number');",
							"        pm.expect(item.status).to.eq(200);",
							"        ",
							"        pm.expect(item.errors).to.be.an('array');",
							"        pm.expect(item.errors.length).to.eq(0);",
							"    });",
							"});",
							"",
							"pm.test(\"/location has NaN uncertainty values\", function () {",
							"    var jsonData = pm.response.json();",
							"    const settings = jsonData.settings;",
							"    const records = jsonData.records;",
							"    records.forEach(function(item, index) {",
							"        pm.expect(item).to.be.an('object');",
							"        pm.expect(item.metric_mean).to.not.eq(-9999.0);",
							"    });",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/geo+json",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"locations\": [\n        {{sf_location}}\n    ],\n    \"perils\": [\"precip\"],\n    \"scenarios\": [],\n    \"years\": []\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseURL}}/location",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"location"
					]
				}
			},
			"response": []
		},
		{
			"name": "location-json-filter (all)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"/location has HTTP status 200\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"",
							"const location_properties = [",
							"    \"latitude\",",
							"    \"longitude\",",
							"    \"extra\",",
							"    \"errors\",",
							"    \"status\"",
							"];",
							"",
							"const peril_properties = [",
							"    \"peril\",",
							"    \"peril_code\",",
							"    \"peril_version\",",
							"    \"scenario\",",
							"    \"year\",",
							"    \"metric\",",
							"    \"metric_units\"",
							"];",
							"",
							"const peril_outcome_properties = [",
							"    \"m_latitude\",",
							"    \"m_longitude\",",
							"    \"metric_mean\",",
							"    \"metric_lower\",",
							"    \"metric_upper\"",
							"];",
							"",
							"pm.test(\"/location has request settings\", function () {",
							"    var jsonData = pm.response.json();",
							"    const settings = jsonData.settings;",
							"    pm.expect(settings).to.be.an('object');",
							"    const settings_properties = [",
							"        \"csg_version\",",
							"        \"perils\",",
							"        \"metrics\",",
							"        \"scenarios\",",
							"        \"years\"",
							"    ];",
							"    pm.expect(settings).to.include.keys(settings_properties);",
							"});",
							"",
							"pm.test(\"/location has JSON peril features\", function () {",
							"    var jsonData = pm.response.json();",
							"    const records = jsonData.records;",
							"    pm.expect(records).to.be.an('array');",
							"    pm.expect(records).to.have.lengthOf.at.least(1);",
							"    records.forEach(function(item, index) {",
							"        pm.expect(item).to.be.an('object');",
							"      ",
							"        pm.expect(item.latitude).to.be.an('number');",
							"        pm.expect(item.latitude).that.is.within(-90,90);",
							"        pm.expect(item.longitude).to.be.an('number');",
							"        pm.expect(item.longitude).that.is.within(-180,180);",
							"",
							"        pm.expect(item.status).to.be.an('number');",
							"        pm.expect(item.status).to.eq(200);",
							"        ",
							"        pm.expect(item.errors).to.be.an('array');",
							"        pm.expect(item.errors.length).to.eq(0);",
							"    });",
							"});",
							"",
							"pm.test(\"/location has NaN uncertainty values\", function () {",
							"    var jsonData = pm.response.json();",
							"    const settings = jsonData.settings;",
							"    const records = jsonData.records;",
							"    records.forEach(function(item, index) {",
							"        pm.expect(item).to.be.an('object');",
							"        pm.expect(item.metric_mean).to.not.eq(-9999.0);",
							"    });",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/geo+json",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"locations\": [\n        {{sf_location}}\n    ],\n    \"perils\": [],\n    \"scenarios\": [],\n    \"years\": []\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseURL}}/location",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"location"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "{{customerApiKey}}",
				"type": "string"
			},
			{
				"key": "key",
				"value": "X-API-Key",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "null_location",
			"value": "{\"locationId\": 0,\"latitude\": 0.0,\"longitude\": 0.0,\"extra\": {\"address\": \"1 Null Island\",\"city\": \"Null Island\",\"state\": \"Null Island\",\"country\": \"Null Island\",\"zipCode\": 0}}"
		},
		{
			"key": "ny_location",
			"value": "{\"locationId\": 1,\"latitude\": 40.705619,\"longitude\": -74.013402,\"extra\": {\"address\": \"Charging Bull\",\"city\": \"New York\",\"state\": \"New York\",\"country\": \"USA\",\"zipCode\": 10004}}"
		},
		{
			"key": "sf_location",
			"value": "{\"latitude\": 37.793871, \"longitude\": -122.395556}"
		}
	]
}